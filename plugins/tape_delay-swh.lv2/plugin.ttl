@prefix : <http://lv2plug.in/ns/lv2core#> .
@prefix swh: <http://plugin.org.uk/swh-plugins/> .
@prefix foaf: <http://xmlns.com/foaf/0.1/> .
@prefix doap: <http://usefulinc.com/ns/doap#> .
@prefix rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs:  <http://www.w3.org/2000/01/rdf-schema#> .
@prefix swhext: <http://plugin.org.uk/extensions#> .
@prefix pg: <http://lv2plug.in/ns/ext/port-groups#> .
@prefix pprops: <http://lv2plug.in/ns/ext/port-props#> .
@prefix mod: <http://moddevices.com/ns/mod#> .
@prefix modgui: <http://moddevices.com/ns/modgui#> .

swh:tapeDelay a :Plugin ;
   a :DelayPlugin ;
   a :SimulatorPlugin ;

   doap:name "Tape Delay Simulation" ;
   rdfs:comment "Correctly models the tape motion and some of the smear effect, there is no simulation fo the head saturation. The way the tape accelerates and decelerates gives a nicer delay effect for many purposes." ;
   doap:maintainer [
      foaf:name "Steve Harris";
      foaf:homepage <http://plugin.org.uk/> ;
      foaf:mbox <mailto:steve@plugin.org.uk> ;
   ] ;
   doap:license <http://usefulinc.com/doap/licenses/gpl> ;
   :documentation <http://plugin.org.uk/ladspa-swh/docs/ladspa-swh.html#tapeDelay> ;

   :port [
     a :InputPort, :ControlPort ;
     :name "Tape speed (inches/sec, 1=normal)" ;
     :index 0 ;
     :symbol "speed" ;
     :minimum 0 ;
     :maximum 10 ;
     
     :default 1.0 ;
   ] ;
  
   :port [
     a :InputPort, :ControlPort ;
     :name "Dry level (dB)" ;
     :index 1 ;
     :symbol "da_db" ;
     :minimum -90 ;
     :maximum 0 ;
     
     :default -90 ;
   ] ;
  
   :port [
     a :InputPort, :ControlPort ;
     :name "Tap 1 distance (inches)" ;
     :index 2 ;
     :symbol "t1d" ;
     :minimum 0 ;
     :maximum 4 ;
     
     :default 0.0 ;
   ] ;
  
   :port [
     a :InputPort, :ControlPort ;
     :name "Tap 1 level (dB)" ;
     :index 3 ;
     :symbol "t1a_db" ;
     :minimum -90 ;
     :maximum 0 ;
     
     :default 0.0 ;
   ] ;
  
   :port [
     a :InputPort, :ControlPort ;
     :name "Tap 2 distance (inches)" ;
     :index 4 ;
     :symbol "t2d" ;
     :minimum 0 ;
     :maximum 4 ;
     
     :default 1 ;
   ] ;
  
   :port [
     a :InputPort, :ControlPort ;
     :name "Tap 2 level (dB)" ;
     :index 5 ;
     :symbol "t2a_db" ;
     :minimum -90 ;
     :maximum 0 ;
     
     :default -90 ;
   ] ;
  
   :port [
     a :InputPort, :ControlPort ;
     :name "Tap 3 distance (inches)" ;
     :index 6 ;
     :symbol "t3d" ;
     :minimum 0 ;
     :maximum 4 ;
     
     :default 2 ;
   ] ;
  
   :port [
     a :InputPort, :ControlPort ;
     :name "Tap 3 level (dB)" ;
     :index 7 ;
     :symbol "t3a_db" ;
     :minimum -90 ;
     :maximum 0 ;
     
     :default -90 ;
   ] ;
  
   :port [
     a :InputPort, :ControlPort ;
     :name "Tap 4 distance (inches)" ;
     :index 8 ;
     :symbol "t4d" ;
     :minimum 0 ;
     :maximum 4 ;
     
     :default 3 ;
     :default 3 ;
   ] ;
  
   :port [
     a :InputPort, :ControlPort ;
     :name "Tap 4 level (dB)" ;
     :index 9 ;
     :symbol "t4a_db" ;
     :minimum -90 ;
     :maximum 0 ;
     
     :default -90 ;
   ] ;
  
   :port [
     a :InputPort, :AudioPort ;
     :name "Input" ;
     :index 10 ;
     :symbol "input" ;
   ] ;
  
   :port [
     a :OutputPort, :AudioPort ;
     :name "Output" ;
     :index 11 ;
     :symbol "output" ;
   ] ;
  
   swhext:code """
#include "ladspa-util.h"

#define BASE_BUFFER 8 // Tape length (inches)
		""" ;

   swhext:callback [
     swhext:event "instantiate" ;
     swhext:code """
			unsigned int mbs = BASE_BUFFER * s_rate;
			sample_rate = s_rate;
			for (buffer_size = 4096; buffer_size < mbs;
			     buffer_size *= 2);
			buffer = malloc(buffer_size * sizeof(LADSPA_Data));
			buffer_mask = buffer_size - 1;
			phase = 0;
			last_phase = 0;
			last_in = 0.0f;
			last2_in = 0.0f;
			last3_in = 0.0f;
			z0 = 0.0f;
			z1 = 0.0f;
			z2 = 0.0f;
		""" ;
   ] ;
  
   swhext:callback [
     swhext:event "activate" ;
     swhext:code """
			int i;

			for (i = 0; i < buffer_size; i++) {
				buffer[i] = 0;
			}
			phase = 0;
			last_phase = 0;
			last_in = 0.0f;
			last2_in = 0.0f;
			last3_in = 0.0f;
			sample_rate = sample_rate;
			z0 = 0.0f;
			z1 = 0.0f;
			z2 = 0.0f;
		""" ;
   ] ;
  
   swhext:callback [
     swhext:event "cleanup" ;
     swhext:code """
			free(plugin_data->buffer);
		""" ;
   ] ;
  
   swhext:callback [
     swhext:event "run" ;
     swhext:code """
unsigned int pos;
float increment = f_clamp(speed, 0.0f, 40.0f);
float lin_int, lin_inc;
unsigned int track;
unsigned int fph;
LADSPA_Data out;

const float da = DB_CO(da_db);
const float t1a = DB_CO(t1a_db);
const float t2a = DB_CO(t2a_db);
const float t3a = DB_CO(t3a_db);
const float t4a = DB_CO(t4a_db);
const unsigned int t1d_s = f_round(t1d * sample_rate);
const unsigned int t2d_s = f_round(t2d * sample_rate);
const unsigned int t3d_s = f_round(t3d * sample_rate);
const unsigned int t4d_s = f_round(t4d * sample_rate);

for (pos = 0; pos < sample_count; pos++) {
	fph = f_trunc(phase);
	last_phase = fph;
	lin_int = phase - (float)fph;

	out = buffer[(unsigned int)(fph - t1d_s) & buffer_mask] * t1a;
	out += buffer[(unsigned int)(fph - t2d_s) & buffer_mask] * t2a;
	out += buffer[(unsigned int)(fph - t3d_s) & buffer_mask] * t3a;
	out += buffer[(unsigned int)(fph - t4d_s) & buffer_mask] * t4a;

	phase += increment;
	lin_inc = 1.0f / (floor(phase) - last_phase + 1);
	lin_inc = lin_inc > 1.0f ? 1.0f : lin_inc;
	lin_int = 0.0f;
	for (track = last_phase; track < phase; track++) {
		lin_int += lin_inc;
		buffer[track & buffer_mask] =
		 cube_interp(lin_int, last3_in, last2_in, last_in, input[pos]);
	}
	last3_in = last2_in;
	last2_in = last_in;
	last_in = input[pos];
	out += input[pos] * da;
	buffer_write(output[pos], out);
	if (phase >= buffer_size) {
		phase -= buffer_size;
	}
}

// Store current phase in instance
plugin_data->phase = phase;
plugin_data->last_phase = last_phase;
plugin_data->last_in = last_in;
plugin_data->last2_in = last2_in;
plugin_data->last3_in = last3_in;
plugin_data->z0 = z0;
plugin_data->z1 = z1;
plugin_data->z2 = z2;
		""" ;
   ] ;
  
   swhext:createdBy <http://plugin.org.uk/swh-plugins/toTurtle.xsl> .
