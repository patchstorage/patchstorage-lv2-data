@prefix : <http://lv2plug.in/ns/lv2core#> .
@prefix swh: <http://plugin.org.uk/swh-plugins/> .
@prefix foaf: <http://xmlns.com/foaf/0.1/> .
@prefix doap: <http://usefulinc.com/ns/doap#> .
@prefix rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs:  <http://www.w3.org/2000/01/rdf-schema#> .
@prefix swhext: <http://plugin.org.uk/extensions#> .
@prefix pg: <http://lv2plug.in/ns/ext/port-groups#> .
@prefix pprops: <http://lv2plug.in/ns/ext/port-props#> .
@prefix mod: <http://moddevices.com/ns/mod#> .
@prefix modgui: <http://moddevices.com/ns/modgui#> .

swh:gverb-in a pg:Group ;
   a pg:MonoGroup ;
   :symbol "in" .
  
swh:gverb-out a pg:Group ;
   a pg:StereoGroup ;
   :symbol "out" ;
   pg:source swh:gverb-in .
  
swh:gverb a :Plugin ;
   a :ReverbPlugin ;

   doap:name "GVerb" ;
   rdfs:comment "A mono in, stereo out reverb" ;
   doap:maintainer [
      foaf:name "Steve Harris";
      foaf:homepage <http://plugin.org.uk/> ;
      foaf:mbox <mailto:steve@plugin.org.uk> ;
   ] ;
   doap:license <http://usefulinc.com/doap/licenses/gpl> ;
   :documentation <http://plugin.org.uk/ladspa-swh/docs/ladspa-swh.html#gverb> ;

   :pluginProperty :hardRtCapable ;
    
   :port [
     a :InputPort, :ControlPort ;
     :name "Roomsize (m)" ;
     :index 0 ;
     :symbol "roomsize" ;
     :minimum 1 ;
     :maximum 300 ;
     
     :default 75.75 ;
   ] ;
  
   :port [
     a :InputPort, :ControlPort ;
     :name "Reverb time (s)" ;
     :index 1 ;
     :symbol "revtime" ;
     :minimum 0.1 ;
     :maximum 30 ;
     
     :default 7.575 ;
   ] ;
  
   :port [
     a :InputPort, :ControlPort ;
     :name "Damping" ;
     :index 2 ;
     :symbol "damping" ;
     :minimum 0 ;
     :maximum 1 ;
     
     :default 0.5 ;
   ] ;
  
   :port [
     a :InputPort, :ControlPort ;
     :name "Input bandwidth" ;
     :index 3 ;
     :symbol "inputbandwidth" ;
     :minimum 0 ;
     :maximum 1 ;
     
     :default 0.75 ;
     :default 0.75 ;
   ] ;
  
   :port [
     a :InputPort, :ControlPort ;
     :name "Dry signal level (dB)" ;
     :index 4 ;
     :symbol "drylevel" ;
     :minimum -70 ;
     :maximum 0 ;
     
     :default -70 ;
   ] ;
  
   :port [
     a :InputPort, :ControlPort ;
     :name "Early reflection level (dB)" ;
     :index 5 ;
     :symbol "earlylevel" ;
     :minimum -70 ;
     :maximum 0 ;
     
     :default 0.0 ;
   ] ;
  
   :port [
     a :InputPort, :ControlPort ;
     :name "Tail level (dB)" ;
     :index 6 ;
     :symbol "taillevel" ;
     :minimum -70 ;
     :maximum 0 ;
     
     :default -17.5 ;
     :default -17.5 ;
   ] ;
  
   :port [
     a :InputPort, :AudioPort ;
     :name "Input" ;
     :index 7 ;
     :symbol "input" ;
     pg:inGroup swh:gverb-in ;
     pg:role pg:centerChannel ;
   ] ;
  
   :port [
     a :OutputPort, :AudioPort ;
     :name "Left output" ;
     :index 8 ;
     :symbol "outl" ;
     pg:inGroup swh:gverb-out ;
     pg:role pg:leftChannel ;
   ] ;
  
   :port [
     a :OutputPort, :AudioPort ;
     :name "Right output" ;
     :index 9 ;
     :symbol "outr" ;
     pg:inGroup swh:gverb-out ;
     pg:role pg:rightChannel ;
   ] ;
  
   swhext:code """
/*

GVerb algorithm designed and implemented by Juhana Sadeharju.
LADSPA implementation and GVerb speeds ups by Steve Harris.

Comments and suggestions should be mailed to Juhana Sadeharju
(kouhia at nic funet fi).

*/

#include "ladspa-util.h"
#include "gverb/gverbdsp.h"
#include "gverb/gverb.h"
    """ ;

   swhext:callback [
     swhext:event "instantiate" ;
     swhext:code """
      verb = gverb_new(s_rate, 300.0f, 50.0f, 7.0f, 0.5f, 15.0f, 0.5f, 0.5f, 0.5f);
    """ ;
   ] ;
  
   swhext:callback [
     swhext:event "activate" ;
     swhext:code """
      gverb_flush(plugin_data->verb);
    """ ;
   ] ;
  
   swhext:callback [
     swhext:event "cleanup" ;
     swhext:code """
      gverb_free(plugin_data->verb);
    """ ;
   ] ;
  
   swhext:callback [
     swhext:event "run" ;
     swhext:code """
      unsigned long pos;
      float l, r;
      float dryc = DB_CO(drylevel);

      gverb_set_roomsize(verb, roomsize);
      gverb_set_revtime(verb, revtime);
      gverb_set_damping(verb, damping);
      gverb_set_inputbandwidth(verb, inputbandwidth);
      gverb_set_earlylevel(verb, DB_CO(earlylevel));
      gverb_set_taillevel(verb, DB_CO(taillevel));

      for (pos = 0; pos < sample_count; pos++) {
        gverb_do(verb, input[pos], &l, &r);
        buffer_write(outl[pos], l + input[pos] * dryc);
        buffer_write(outr[pos], r + input[pos] * dryc);
      }
    """ ;
   ] ;
  
   swhext:createdBy <http://plugin.org.uk/swh-plugins/toTurtle.xsl> .
