@prefix : <http://lv2plug.in/ns/lv2core#> .
@prefix swh: <http://plugin.org.uk/swh-plugins/> .
@prefix foaf: <http://xmlns.com/foaf/0.1/> .
@prefix doap: <http://usefulinc.com/ns/doap#> .
@prefix rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs:  <http://www.w3.org/2000/01/rdf-schema#> .
@prefix swhext: <http://plugin.org.uk/extensions#> .
@prefix pg: <http://lv2plug.in/ns/ext/port-groups#> .
@prefix pprops: <http://lv2plug.in/ns/ext/port-props#> .
@prefix mod: <http://moddevices.com/ns/mod#> .
@prefix modgui: <http://moddevices.com/ns/modgui#> .

swh:revdelay a :Plugin ;
   a :DelayPlugin ;

   doap:name "Reverse Delay" ;
   rdfs:comment "A reverse delay not really modelled on any existing one. You'll want to set the Crossfade Samples parameter to something reasonably small (but more than 20) for most applications, but you can try larger values if you start getting clicking." ;

   doap:maintainer [
      foaf:name "Steve Harris";
      foaf:homepage <http://plugin.org.uk/> ;
      foaf:mbox <mailto:steve@plugin.org.uk> ;
   ] ;
   doap:license <http://usefulinc.com/doap/licenses/gpl> ;
   :documentation <http://plugin.org.uk/ladspa-swh/docs/ladspa-swh.html#revdelay> ;

   :pluginProperty :hardRtCapable ;
    
   :port [
     a :InputPort, :AudioPort ;
     :name "Input" ;
     :index 0 ;
     :symbol "in" ;
   ] ;
  
   :port [
     a :OutputPort, :AudioPort ;
     :name "Output" ;
     :index 1 ;
     :symbol "out" ;
   ] ;
  
   :port [
     a :InputPort, :ControlPort ;
     :name "Delay Time (s)" ;
     :index 2 ;
     :symbol "delay_time" ;
     :minimum 0 ;
     :maximum 5.0 ;
     
     :default 0.0 ;
   ] ;
  
   :port [
     a :InputPort, :ControlPort ;
     :name "Dry Level (dB)" ;
     :index 3 ;
     :symbol "dry_level" ;
     :minimum -70 ;
     :maximum 0 ;
     
     :default 0.0 ;
   ] ;
  
   :port [
     a :InputPort, :ControlPort ;
     :name "Wet Level (dB)" ;
     :index 4 ;
     :symbol "wet_level" ;
     :minimum -70 ;
     :maximum 0 ;
     
     :default 0.0 ;
   ] ;
  
   :port [
     a :InputPort, :ControlPort ;
     :name "Feedback" ;
     :index 5 ;
     :symbol "feedback" ;
     :minimum 0 ;
     :maximum 1 ;
     
     :default 0.0 ;
   ] ;
  
   :port [
     a :InputPort, :ControlPort ;
     :name "Crossfade samples" ;
     :index 6 ;
     :symbol "xfade_samp" ;
     :minimum 0 ;
     :maximum 5000 ;
     
     :default 1250 ;
     :portProperty :integer ;
   ] ;
  
   swhext:code """
      #include "ladspa-util.h"
      #include <stdio.h>

      #define MIN(a,b) ((a) < (b) ? (a) : (b))
      #define CALC_DELAY(delaytime) \\
        (f_clamp (delaytime * sample_rate, 1.f, (float)(buffer_size + 1)))

    """ ;

   swhext:callback [
     swhext:event "instantiate" ;
     swhext:code """
      sample_rate = s_rate;
      buffer_size = 0;
      delay_samples = 0;
      last_delay_time = 0;
      write_phase = 0;
    """ ;
   ] ;
  
   swhext:callback [
     swhext:event "activate" ;
     swhext:code """
      unsigned int size;

      size = sample_rate * 5 * 2; /* 5 second maximum */
        
      /* calloc sets the buffer to zero. */
      plugin_data->buffer = calloc(size, sizeof(LADSPA_Data));

      plugin_data->buffer_size = size;
      plugin_data->write_phase = 0;
      plugin_data->delay_samples = 0;
    """ ;
   ] ;
  
   swhext:callback [
     swhext:event "cleanup" ;
     swhext:code """
      free(plugin_data->buffer);
    """ ;
   ] ;
  
   swhext:callback [
     swhext:event "run" ;
     swhext:code """
      int i;
      unsigned long delay2;
      float dry = DB_CO(dry_level);
      float wet = DB_CO(wet_level);
      float fadescale;
      unsigned long xfadesamp = xfade_samp;

      if (write_phase == 0) {
        plugin_data->last_delay_time = delay_time;
        plugin_data->delay_samples = delay_samples = CALC_DELAY (delay_time);
      }

      if (delay_time == last_delay_time) {
        long idelay_samples = (long)delay_samples;
        delay2 = idelay_samples * 2;

        if (xfadesamp > idelay_samples) {
            /* force it to half */
            xfadesamp = idelay_samples / 2;
        }

        for (i=0; i<sample_count; i++) {
          long read_phase = delay2 - write_phase;
          LADSPA_Data read;
          LADSPA_Data insamp;

          insamp = in[i];
          read =  (wet * buffer[read_phase]) + (dry * insamp);

          if ( (write_phase % idelay_samples) < xfadesamp) {
            fadescale = (write_phase % idelay_samples) / (1.0 * xfadesamp);
          }
          else if ((write_phase % idelay_samples) > (idelay_samples - xfadesamp)) {
            fadescale = (idelay_samples - (write_phase % idelay_samples)) / (1.0 * xfadesamp);
          }
          else {
            fadescale = 1.0;
          }

          buffer[write_phase] = fadescale * (insamp + (feedback * read)); 
	  buffer[write_phase] = flush_to_zero(buffer[write_phase]);
                  
	  buffer_write(out[i], read);
          write_phase = (write_phase + 1) % delay2;
        }
      } else {
        float next_delay_samples = CALC_DELAY (delay_time);
        float delay_samples_slope = (next_delay_samples - delay_samples) / sample_count;

        for (i=0; i<sample_count; i++) {
          long read_phase, idelay_samples;
          LADSPA_Data frac, read;
          LADSPA_Data insamp;
          insamp = in[i];

          delay_samples += delay_samples_slope;
          delay2 = (long) (delay_samples * 2);
          write_phase = (write_phase + 1) % delay2;

          read_phase = delay2 - write_phase;
          idelay_samples = (long)delay_samples;
          frac = delay_samples - idelay_samples;
          read = wet * buffer[read_phase]   + (dry * insamp);

          if ((write_phase % idelay_samples) < xfade_samp) {
            fadescale = (write_phase % idelay_samples) / (1.0 * xfade_samp);
          }
          else if ((write_phase % idelay_samples) > (idelay_samples - xfade_samp)) {
            fadescale = (idelay_samples - (write_phase % idelay_samples)) / (1.0 * xfade_samp);
          }
          else {
            fadescale = 1.0;
          }

          buffer[write_phase] = fadescale * (insamp + (feedback * read)); 
	  buffer[write_phase] = flush_to_zero(buffer[write_phase]);

	  buffer_write(out[i], read);
        }

        plugin_data->last_delay_time = delay_time;
        plugin_data->delay_samples = delay_samples;
      }
      
      plugin_data->write_phase = write_phase;
    """ ;
   ] ;
  
   swhext:createdBy <http://plugin.org.uk/swh-plugins/toTurtle.xsl> .
